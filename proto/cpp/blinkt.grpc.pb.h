// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blinkt.proto
#ifndef GRPC_blinkt_2eproto__INCLUDED
#define GRPC_blinkt_2eproto__INCLUDED

#include "blinkt.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

class Blinkt final {
 public:
  static constexpr char const* service_full_name() {
    return "Blinkt";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetPixel(::grpc::ClientContext* context, const ::Pixel& request, ::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> AsyncSetPixel(::grpc::ClientContext* context, const ::Pixel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(AsyncSetPixelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> PrepareAsyncSetPixel(::grpc::ClientContext* context, const ::Pixel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(PrepareAsyncSetPixelRaw(context, request, cq));
    }
    virtual ::grpc::Status Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> AsyncClear(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(AsyncClearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> PrepareAsyncClear(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(PrepareAsyncClearRaw(context, request, cq));
    }
    virtual ::grpc::Status Show(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> AsyncShow(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(AsyncShowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> PrepareAsyncShow(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(PrepareAsyncShowRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SetPixel(::grpc::ClientContext* context, const ::Pixel* request, ::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPixel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPixel(::grpc::ClientContext* context, const ::Pixel* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetPixel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Clear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Clear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Show(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Show(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* AsyncSetPixelRaw(::grpc::ClientContext* context, const ::Pixel& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* PrepareAsyncSetPixelRaw(::grpc::ClientContext* context, const ::Pixel& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* AsyncClearRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* AsyncShowRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetPixel(::grpc::ClientContext* context, const ::Pixel& request, ::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> AsyncSetPixel(::grpc::ClientContext* context, const ::Pixel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(AsyncSetPixelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> PrepareAsyncSetPixel(::grpc::ClientContext* context, const ::Pixel& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(PrepareAsyncSetPixelRaw(context, request, cq));
    }
    ::grpc::Status Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> AsyncClear(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(AsyncClearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> PrepareAsyncClear(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(PrepareAsyncClearRaw(context, request, cq));
    }
    ::grpc::Status Show(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> AsyncShow(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(AsyncShowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> PrepareAsyncShow(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(PrepareAsyncShowRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetPixel(::grpc::ClientContext* context, const ::Pixel* request, ::Response* response, std::function<void(::grpc::Status)>) override;
      void SetPixel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, std::function<void(::grpc::Status)>) override;
      void SetPixel(::grpc::ClientContext* context, const ::Pixel* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetPixel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, std::function<void(::grpc::Status)>) override;
      void Clear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, std::function<void(::grpc::Status)>) override;
      void Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Clear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Show(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, std::function<void(::grpc::Status)>) override;
      void Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, std::function<void(::grpc::Status)>) override;
      void Show(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Response>* AsyncSetPixelRaw(::grpc::ClientContext* context, const ::Pixel& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* PrepareAsyncSetPixelRaw(::grpc::ClientContext* context, const ::Pixel& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* AsyncClearRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* AsyncShowRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetPixel_;
    const ::grpc::internal::RpcMethod rpcmethod_Clear_;
    const ::grpc::internal::RpcMethod rpcmethod_Show_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetPixel(::grpc::ServerContext* context, const ::Pixel* request, ::Response* response);
    virtual ::grpc::Status Clear(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response);
    virtual ::grpc::Status Show(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetPixel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPixel(::grpc::ServerContext* context, const ::Pixel* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPixel(::grpc::ServerContext* context, ::Pixel* request, ::grpc::ServerAsyncResponseWriter< ::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Clear() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClear(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Show() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Show(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShow(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetPixel<WithAsyncMethod_Clear<WithAsyncMethod_Show<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetPixel() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::Pixel, ::Response>(
          [this](::grpc::ServerContext* context,
                 const ::Pixel* request,
                 ::Response* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetPixel(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetPixel(
        ::grpc::experimental::MessageAllocator< ::Pixel, ::Response>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Pixel, ::Response>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPixel(::grpc::ServerContext* context, const ::Pixel* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetPixel(::grpc::ServerContext* context, const ::Pixel* request, ::Response* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Clear() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Response>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::Response* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Clear(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Clear(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::Response>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Response>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Clear(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Show() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Response>(
          [this](::grpc::ServerContext* context,
                 const ::google::protobuf::Empty* request,
                 ::Response* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Show(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Show(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::Response>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::Response>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Show(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Show(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SetPixel<ExperimentalWithCallbackMethod_Clear<ExperimentalWithCallbackMethod_Show<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetPixel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPixel(::grpc::ServerContext* context, const ::Pixel* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Clear() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Show() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Show(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetPixel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPixel(::grpc::ServerContext* context, const ::Pixel* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPixel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Clear() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Show() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Show(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPixel() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetPixel(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPixel(::grpc::ServerContext* context, const ::Pixel* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetPixel(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Clear() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Clear(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Clear(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Clear(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Show() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Show(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Show(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Show(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetPixel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Pixel, ::Response>(std::bind(&WithStreamedUnaryMethod_SetPixel<BaseClass>::StreamedSetPixel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPixel(::grpc::ServerContext* context, const ::Pixel* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPixel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Pixel,::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Clear() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::Response>(std::bind(&WithStreamedUnaryMethod_Clear<BaseClass>::StreamedClear, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Clear(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClear(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Show : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Show() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::Response>(std::bind(&WithStreamedUnaryMethod_Show<BaseClass>::StreamedShow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Show() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Show(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetPixel<WithStreamedUnaryMethod_Clear<WithStreamedUnaryMethod_Show<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetPixel<WithStreamedUnaryMethod_Clear<WithStreamedUnaryMethod_Show<Service > > > StreamedService;
};


#endif  // GRPC_blinkt_2eproto__INCLUDED
