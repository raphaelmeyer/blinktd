// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blinkt.proto

#include "blinkt.pb.h"
#include "blinkt.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Blinkt_method_names[] = {
  "/Blinkt/SetPixel",
  "/Blinkt/Clear",
  "/Blinkt/Show",
};

std::unique_ptr< Blinkt::Stub> Blinkt::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Blinkt::Stub> stub(new Blinkt::Stub(channel));
  return stub;
}

Blinkt::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetPixel_(Blinkt_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Clear_(Blinkt_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(Blinkt_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Blinkt::Stub::SetPixel(::grpc::ClientContext* context, const ::Pixel& request, ::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPixel_, context, request, response);
}

void Blinkt::Stub::experimental_async::SetPixel(::grpc::ClientContext* context, const ::Pixel* request, ::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPixel_, context, request, response, std::move(f));
}

void Blinkt::Stub::experimental_async::SetPixel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPixel_, context, request, response, std::move(f));
}

void Blinkt::Stub::experimental_async::SetPixel(::grpc::ClientContext* context, const ::Pixel* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPixel_, context, request, response, reactor);
}

void Blinkt::Stub::experimental_async::SetPixel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPixel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Response>* Blinkt::Stub::AsyncSetPixelRaw(::grpc::ClientContext* context, const ::Pixel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Response>::Create(channel_.get(), cq, rpcmethod_SetPixel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Response>* Blinkt::Stub::PrepareAsyncSetPixelRaw(::grpc::ClientContext* context, const ::Pixel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Response>::Create(channel_.get(), cq, rpcmethod_SetPixel_, context, request, false);
}

::grpc::Status Blinkt::Stub::Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Clear_, context, request, response);
}

void Blinkt::Stub::experimental_async::Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, std::move(f));
}

void Blinkt::Stub::experimental_async::Clear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, std::move(f));
}

void Blinkt::Stub::experimental_async::Clear(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, reactor);
}

void Blinkt::Stub::experimental_async::Clear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Response>* Blinkt::Stub::AsyncClearRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Response>::Create(channel_.get(), cq, rpcmethod_Clear_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Response>* Blinkt::Stub::PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Response>::Create(channel_.get(), cq, rpcmethod_Clear_, context, request, false);
}

::grpc::Status Blinkt::Stub::Show(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Show_, context, request, response);
}

void Blinkt::Stub::experimental_async::Show(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void Blinkt::Stub::experimental_async::Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void Blinkt::Stub::experimental_async::Show(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

void Blinkt::Stub::experimental_async::Show(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Response>* Blinkt::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Response>::Create(channel_.get(), cq, rpcmethod_Show_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Response>* Blinkt::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Response>::Create(channel_.get(), cq, rpcmethod_Show_, context, request, false);
}

Blinkt::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Blinkt_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Blinkt::Service, ::Pixel, ::Response>(
          std::mem_fn(&Blinkt::Service::SetPixel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Blinkt_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Blinkt::Service, ::google::protobuf::Empty, ::Response>(
          std::mem_fn(&Blinkt::Service::Clear), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Blinkt_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Blinkt::Service, ::google::protobuf::Empty, ::Response>(
          std::mem_fn(&Blinkt::Service::Show), this)));
}

Blinkt::Service::~Service() {
}

::grpc::Status Blinkt::Service::SetPixel(::grpc::ServerContext* context, const ::Pixel* request, ::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Blinkt::Service::Clear(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Blinkt::Service::Show(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


