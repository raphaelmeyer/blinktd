// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blinkt.proto

#ifndef PROTOBUF_INCLUDED_blinkt_2eproto
#define PROTOBUF_INCLUDED_blinkt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blinkt_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_blinkt_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_blinkt_2eproto();
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Pixel;
class PixelDefaultTypeInternal;
extern PixelDefaultTypeInternal _Pixel_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
namespace google {
namespace protobuf {
template<> ::Color* Arena::CreateMaybeMessage<::Color>(Arena*);
template<> ::Pixel* Arena::CreateMaybeMessage<::Pixel>(Arena*);
template<> ::Response* Arena::CreateMaybeMessage<::Response>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Pixel_Brightness {
  Pixel_Brightness_Off = 0,
  Pixel_Brightness_Low = 1,
  Pixel_Brightness_Medium = 2,
  Pixel_Brightness_Bright = 3,
  Pixel_Brightness_Maximum = 4,
  Pixel_Brightness_Pixel_Brightness_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Pixel_Brightness_Pixel_Brightness_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Pixel_Brightness_IsValid(int value);
const Pixel_Brightness Pixel_Brightness_Brightness_MIN = Pixel_Brightness_Off;
const Pixel_Brightness Pixel_Brightness_Brightness_MAX = Pixel_Brightness_Maximum;
const int Pixel_Brightness_Brightness_ARRAYSIZE = Pixel_Brightness_Brightness_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pixel_Brightness_descriptor();
inline const ::std::string& Pixel_Brightness_Name(Pixel_Brightness value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pixel_Brightness_descriptor(), value);
}
inline bool Pixel_Brightness_Parse(
    const ::std::string& name, Pixel_Brightness* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pixel_Brightness>(
    Pixel_Brightness_descriptor(), name, value);
}
enum Response_Result {
  Response_Result_Failure = 0,
  Response_Result_Success = 1,
  Response_Result_Response_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Response_Result_Response_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Response_Result_IsValid(int value);
const Response_Result Response_Result_Result_MIN = Response_Result_Failure;
const Response_Result Response_Result_Result_MAX = Response_Result_Success;
const int Response_Result_Result_ARRAYSIZE = Response_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Result_descriptor();
inline const ::std::string& Response_Result_Name(Response_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Result_descriptor(), value);
}
inline bool Response_Result_Parse(
    const ::std::string& name, Response_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Result>(
    Response_Result_descriptor(), name, value);
}
// ===================================================================

class Color final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 r = 1;
  void clear_r();
  static const int kRFieldNumber = 1;
  ::google::protobuf::uint32 r() const;
  void set_r(::google::protobuf::uint32 value);

  // uint32 g = 2;
  void clear_g();
  static const int kGFieldNumber = 2;
  ::google::protobuf::uint32 g() const;
  void set_g(::google::protobuf::uint32 value);

  // uint32 b = 3;
  void clear_b();
  static const int kBFieldNumber = 3;
  ::google::protobuf::uint32 b() const;
  void set_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Color)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blinkt_2eproto;
};
// -------------------------------------------------------------------

class Pixel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pixel) */ {
 public:
  Pixel();
  virtual ~Pixel();

  Pixel(const Pixel& from);

  inline Pixel& operator=(const Pixel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pixel(Pixel&& from) noexcept
    : Pixel() {
    *this = ::std::move(from);
  }

  inline Pixel& operator=(Pixel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Pixel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pixel* internal_default_instance() {
    return reinterpret_cast<const Pixel*>(
               &_Pixel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Pixel* other);
  friend void swap(Pixel& a, Pixel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pixel* New() const final {
    return CreateMaybeMessage<Pixel>(nullptr);
  }

  Pixel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pixel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pixel& from);
  void MergeFrom(const Pixel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pixel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Pixel_Brightness Brightness;
  static const Brightness Off =
    Pixel_Brightness_Off;
  static const Brightness Low =
    Pixel_Brightness_Low;
  static const Brightness Medium =
    Pixel_Brightness_Medium;
  static const Brightness Bright =
    Pixel_Brightness_Bright;
  static const Brightness Maximum =
    Pixel_Brightness_Maximum;
  static inline bool Brightness_IsValid(int value) {
    return Pixel_Brightness_IsValid(value);
  }
  static const Brightness Brightness_MIN =
    Pixel_Brightness_Brightness_MIN;
  static const Brightness Brightness_MAX =
    Pixel_Brightness_Brightness_MAX;
  static const int Brightness_ARRAYSIZE =
    Pixel_Brightness_Brightness_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Brightness_descriptor() {
    return Pixel_Brightness_descriptor();
  }
  static inline const ::std::string& Brightness_Name(Brightness value) {
    return Pixel_Brightness_Name(value);
  }
  static inline bool Brightness_Parse(const ::std::string& name,
      Brightness* value) {
    return Pixel_Brightness_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Color color = 3;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  const ::Color& color() const;
  ::Color* release_color();
  ::Color* mutable_color();
  void set_allocated_color(::Color* color);

  // uint32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // .Pixel.Brightness brightness = 2;
  void clear_brightness();
  static const int kBrightnessFieldNumber = 2;
  ::Pixel_Brightness brightness() const;
  void set_brightness(::Pixel_Brightness value);

  // @@protoc_insertion_point(class_scope:Pixel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Color* color_;
  ::google::protobuf::uint32 index_;
  int brightness_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blinkt_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_Result Result;
  static const Result Failure =
    Response_Result_Failure;
  static const Result Success =
    Response_Result_Success;
  static inline bool Result_IsValid(int value) {
    return Response_Result_IsValid(value);
  }
  static const Result Result_MIN =
    Response_Result_Result_MIN;
  static const Result Result_MAX =
    Response_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    Response_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return Response_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return Response_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return Response_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Response.Result result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::Response_Result result() const;
  void set_result(::Response_Result value);

  // @@protoc_insertion_point(class_scope:Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blinkt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Color

// uint32 r = 1;
inline void Color::clear_r() {
  r_ = 0u;
}
inline ::google::protobuf::uint32 Color::r() const {
  // @@protoc_insertion_point(field_get:Color.r)
  return r_;
}
inline void Color::set_r(::google::protobuf::uint32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:Color.r)
}

// uint32 g = 2;
inline void Color::clear_g() {
  g_ = 0u;
}
inline ::google::protobuf::uint32 Color::g() const {
  // @@protoc_insertion_point(field_get:Color.g)
  return g_;
}
inline void Color::set_g(::google::protobuf::uint32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:Color.g)
}

// uint32 b = 3;
inline void Color::clear_b() {
  b_ = 0u;
}
inline ::google::protobuf::uint32 Color::b() const {
  // @@protoc_insertion_point(field_get:Color.b)
  return b_;
}
inline void Color::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:Color.b)
}

// -------------------------------------------------------------------

// Pixel

// uint32 index = 1;
inline void Pixel::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 Pixel::index() const {
  // @@protoc_insertion_point(field_get:Pixel.index)
  return index_;
}
inline void Pixel::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:Pixel.index)
}

// .Pixel.Brightness brightness = 2;
inline void Pixel::clear_brightness() {
  brightness_ = 0;
}
inline ::Pixel_Brightness Pixel::brightness() const {
  // @@protoc_insertion_point(field_get:Pixel.brightness)
  return static_cast< ::Pixel_Brightness >(brightness_);
}
inline void Pixel::set_brightness(::Pixel_Brightness value) {
  
  brightness_ = value;
  // @@protoc_insertion_point(field_set:Pixel.brightness)
}

// .Color color = 3;
inline bool Pixel::has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline void Pixel::clear_color() {
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::Color& Pixel::color() const {
  const ::Color* p = color_;
  // @@protoc_insertion_point(field_get:Pixel.color)
  return p != nullptr ? *p : *reinterpret_cast<const ::Color*>(
      &::_Color_default_instance_);
}
inline ::Color* Pixel::release_color() {
  // @@protoc_insertion_point(field_release:Pixel.color)
  
  ::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::Color* Pixel::mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Pixel.color)
  return color_;
}
inline void Pixel::set_allocated_color(::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:Pixel.color)
}

// -------------------------------------------------------------------

// Response

// .Response.Result result = 1;
inline void Response::clear_result() {
  result_ = 0;
}
inline ::Response_Result Response::result() const {
  // @@protoc_insertion_point(field_get:Response.result)
  return static_cast< ::Response_Result >(result_);
}
inline void Response::set_result(::Response_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:Response.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Pixel_Brightness> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pixel_Brightness>() {
  return ::Pixel_Brightness_descriptor();
}
template <> struct is_proto_enum< ::Response_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Response_Result>() {
  return ::Response_Result_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_blinkt_2eproto
